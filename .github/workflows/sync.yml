name: HubSpot‚ÜîMailchimp Bidirectional Sync

on:
  # SCHEDULE TEMPORARILY DISABLED - ENABLE MANUALLY TOMORROW MORNING
  # schedule:
  #   - cron: '0 */10 * * *'   # every 10 hours at minute 0
  #   - cron: '5 9,10 * * 3'   # Wednesday 9:05 and 10:05 UTC - script will determine correct British time
  workflow_dispatch:        # allows you to trigger manually from the Actions tab

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 300  # 5 hour timeout to prevent runaway jobs

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install -r info/requirements.txt

      - name: Debug Environment
        run: |
          echo "Python version: $(python --version)"
          echo "Working directory: $(pwd)"
          echo "Files present:"
          ls -la
          echo "Core module check:"
          python -c "import core.config; print('‚úÖ Import successful')"
      
      - name: Determine Run Mode
        id: run_mode
        run: |
          # Get current UTC time
          CURRENT_DAY=$(date -u +%u)  # 1=Monday, 7=Sunday
          CURRENT_HOUR=$(date -u +%H)
          CURRENT_MINUTE=$(date -u +%M)
          CURRENT_MONTH=$(date -u +%m)
          CURRENT_DATE=$(date -u +%d)
          CURRENT_YEAR=$(date -u +%Y)
          
          # Function to determine if we're in BST (British Summer Time)
          is_bst() {
            local month=$1
            local day=$2
            
            # BST runs from last Sunday in March to last Sunday in October
            if [[ $month -lt 3 || $month -gt 10 ]]; then
              return 1  # GMT (winter)
            elif [[ $month -gt 3 && $month -lt 10 ]]; then
              return 0  # BST (summer)
            elif [[ $month -eq 3 ]]; then
              # March - need to check if we're past last Sunday
              local last_sunday=$(date -d "$CURRENT_YEAR-03-31" +%u)
              local last_sunday_date=$((31 - last_sunday + 1))
              [[ $day -ge $last_sunday_date ]] && return 0 || return 1
            elif [[ $month -eq 10 ]]; then
              # October - need to check if we're before last Sunday
              local last_sunday=$(date -d "$CURRENT_YEAR-10-31" +%u)
              local last_sunday_date=$((31 - last_sunday + 1))
              [[ $day -lt $last_sunday_date ]] && return 0 || return 1
            fi
          }
          
          # Check if this is a Wednesday sales prep run
          if [[ "$CURRENT_DAY" == "3" && "$CURRENT_MINUTE" == "05" ]]; then
            # Determine current British timezone
            if is_bst $CURRENT_MONTH $CURRENT_DATE; then
              # BST active: 9 UTC = 10 AM British Time
              if [[ "$CURRENT_HOUR" == "09" ]]; then
                echo "üéØ Wednesday 10am BST Sales Prep Run Detected"
                echo "mode=SECONDARY_SYNC_ONLY" >> $GITHUB_OUTPUT
                echo "description=Sales Prep: Secondary Sync Only (BST)" >> $GITHUB_OUTPUT
                exit 0
              fi
            else
              # GMT active: 10 UTC = 10 AM British Time  
              if [[ "$CURRENT_HOUR" == "10" ]]; then
                echo "üéØ Wednesday 10am GMT Sales Prep Run Detected"
                echo "mode=SECONDARY_SYNC_ONLY" >> $GITHUB_OUTPUT
                echo "description=Sales Prep: Secondary Sync Only (GMT)" >> $GITHUB_OUTPUT
                exit 0
              fi
            fi
            
            # If we get here, it's Wednesday but wrong time - skip this run
            echo "‚è≠Ô∏è Wednesday detected but not the correct British time - skipping"
            echo "mode=SKIP" >> $GITHUB_OUTPUT
            echo "description=Skipped - Wrong British Time" >> $GITHUB_OUTPUT
          else
            echo "üîÑ Regular Bidirectional Sync Run"
            echo "mode=BIDIRECTIONAL_SYNC" >> $GITHUB_OUTPUT
            echo "description=Full Bidirectional Sync" >> $GITHUB_OUTPUT
          fi
      
      - name: Run HubSpot‚ÜîMailchimp Sync (${{ steps.run_mode.outputs.description }})
        if: steps.run_mode.outputs.mode != 'SKIP'
        run: |
          # Start timing the sync
          SYNC_START=$(date +%s)
          echo "üöÄ Starting sync at $(date -u)"
          
          # Capture both stdout and stderr, and save errors for failure notification
          python -m core.config 2>&1 | tee /tmp/sync_output.log || {
            # Calculate duration for timeout analysis
            SYNC_END=$(date +%s)
            DURATION=$((SYNC_END - SYNC_START))
            
            # If sync fails, extract last error lines for Teams notification
            tail -n 20 /tmp/sync_output.log > /tmp/sync_error.log
            echo "‚ùå Sync failed after ${DURATION} seconds - error details captured for notification"
            
            # Add duration info to error log for Teams notification
            echo "SYNC_DURATION_SECONDS: $DURATION" >> /tmp/sync_error.log
            echo "SYNC_TIMEOUT_LIMIT: 18000 seconds (5 hours)" >> /tmp/sync_error.log
            
            exit 1
          }
          
          # Success - log completion time
          SYNC_END=$(date +%s)
          DURATION=$((SYNC_END - SYNC_START))
          echo "‚úÖ Sync completed successfully in ${DURATION} seconds"
        env:
          HUBSPOT_PRIVATE_TOKEN: ${{ secrets.HUBSPOT_PRIVATE_TOKEN }}
          MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
          MAILCHIMP_LIST_ID: ${{ secrets.MAILCHIMP_LIST_ID }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          RUN_MODE: ${{ steps.run_mode.outputs.mode }}
          # Performance optimizations (Phase-1: Safe immediate speedup)
          HUBSPOT_PAGE_DELAY: "0.1"        # Reduced from 0.5s to 0.1s (80% faster HubSpot pagination)
          MAILCHIMP_TAG_DELAY: "0.05"      # Reduced from 1.0s to 0.05s (95% faster tag operations)  
          MAILCHIMP_UPSERT_DELAY: "0.05"   # New configurable delay after upserts (prevents rate limits)

      - name: Notify Teams on failure
        if: ${{ failure() }}
        run: |
          # Get the current timestamp
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
          
          # Try to extract timing and error details
          if [ -f /tmp/sync_error.log ]; then
            # Extract duration if available
            DURATION_INFO=$(grep "SYNC_DURATION_SECONDS" /tmp/sync_error.log 2>/dev/null | head -1)
            
            # Get last few error lines, escaping quotes and newlines for JSON
            ERROR_DETAILS=$(tail -n 15 /tmp/sync_error.log | grep -v "SYNC_" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
            
            if [ -n "$DURATION_INFO" ]; then
              DURATION=$(echo "$DURATION_INFO" | cut -d: -f2 | tr -d ' ')
              DURATION_TEXT="**Runtime:** $DURATION seconds (timeout at 18,000s)\\n"
            else
              DURATION_TEXT="**Runtime:** Unknown (job may have been terminated)\\n"
            fi
          else
            ERROR_DETAILS="No detailed error log found. The job may have failed during setup or been terminated by GitHub Actions due to timeout/resource limits."
            DURATION_TEXT="**Runtime:** Unable to determine\\n"
          fi
          
          # Extract likely cause from error patterns
          LIKELY_CAUSE="Unknown error"
          if echo "$ERROR_DETAILS" | grep -qi "timeout"; then
            LIKELY_CAUSE="‚è±Ô∏è **Timeout Error** - Sync took too long to complete"
          elif echo "$ERROR_DETAILS" | grep -qi "rate limit\|429"; then
            LIKELY_CAUSE="üö¶ **API Rate Limiting** - Too many requests to HubSpot/Mailchimp"
          elif echo "$ERROR_DETAILS" | grep -qi "connection\|network\|ssl"; then
            LIKELY_CAUSE="üåê **Network/Connection Issue** - API connectivity problems"
          elif echo "$ERROR_DETAILS" | grep -qi "authentication\|401\|403"; then
            LIKELY_CAUSE="üîê **Authentication Error** - Invalid API keys or permissions"
          elif echo "$ERROR_DETAILS" | grep -qi "contact/s"; then
            LIKELY_CAUSE="üêå **Performance Issue** - Sync processing too slowly (likely cause of timeout)"
          fi
          
          # Send detailed error notification
          curl -X POST "${{ secrets.TEAMS_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeColor": "FF0000",
              "summary": "‚ùó HubSpot ‚Üí Mailchimp Sync Failed",
              "sections": [
                {
                  "activityTitle": "‚ùó HubSpot ‚Üí Mailchimp Sync Failed",
                  "activitySubtitle": "The scheduled sync encountered an error and was terminated.",
                  "facts": [
                    {"name": "Repository", "value": "${{ github.repository }}"},
                    {"name": "Workflow", "value": "${{ github.workflow }}"},
                    {"name": "Run Number", "value": "#${{ github.run_number }}"},
                    {"name": "Timestamp", "value": "'$TIMESTAMP'"},
                    {"name": "Trigger", "value": "${{ github.event_name }}"},
                    {"name": "Branch", "value": "${{ github.ref_name }}"}
                  ]
                },
                {
                  "activityTitle": "üîç Error Analysis",
                  "text": "'$LIKELY_CAUSE'\\n\\n'$DURATION_TEXT'**Last Error Output:**\\n```\\n'$ERROR_DETAILS'\\n```"
                },
                {
                  "activityTitle": "üîó Investigation Links", 
                  "text": "‚Ä¢ [**View Full Logs**](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) ‚Üê Start here\\n‚Ä¢ [Workflow Configuration](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/.github/workflows/sync.yml)\\n‚Ä¢ [Repository Dashboard](https://github.com/${{ github.repository }})"
                },
                {
                  "activityTitle": "‚ö° Next Steps",
                  "text": "**Immediate Actions:**\\n‚Ä¢ Check the [full logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for complete error context\\n‚Ä¢ Verify API keys are still valid in repository secrets\\n‚Ä¢ Check HubSpot/Mailchimp service status\\n\\n**If Performance Issue:**\\n‚Ä¢ Consider reducing batch sizes in sync configuration\\n‚Ä¢ Review contact data complexity (large text fields, etc.)\\n‚Ä¢ Check if specific lists are causing slowdowns"
                }
              ]
            }'